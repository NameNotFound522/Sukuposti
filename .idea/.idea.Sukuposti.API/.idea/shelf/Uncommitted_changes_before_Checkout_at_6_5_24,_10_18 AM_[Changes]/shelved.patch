Index: Sukuposti.API/Initializer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Sukuposti.Domain.Models;\nusing Sukuposti.Infrastructure.Repository.Repositories;\n\nnamespace Sukuposti.API;\n\npublic static class Initializer\n{\n    public static async Task InitializeSwagger(this IServiceCollection service)\n    {\n        service.AddSwaggerGen(c => {\n            c.SwaggerDoc(\"v1\", new OpenApiInfo\n            {\n                Title = \"Your API Documentation\",\n                Version = \"v1\",\n                Description = \"Description of your API\",\n                Contact = new OpenApiContact()\n                {\n                    Name = \"Your name\",\n                    Email = \"your@email.com\",\n                }\n            });\n            c.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme()\n            {\n                Name = \"Authorization\",\n                Type = SecuritySchemeType.ApiKey,\n                Scheme = \"Bearer\",\n                BearerFormat = \"JWT\",\n                In = ParameterLocation.Header,\n                Description = \"JWT Authorization header using the Bearer scheme. \\r\\n\\r\\n Enter 'Bearer' [space] and then your token in the text input below.\\r\\n\\r\\nExample: \\\"Bearer 1safsfsdfdfd\\\"\",\n            });\n            c.AddSecurityRequirement(new OpenApiSecurityRequirement {\n                {\n                    new OpenApiSecurityScheme {\n                        Reference = new OpenApiReference {\n                            Type = ReferenceType.SecurityScheme,\n                            Id = \"Bearer\"\n                        }\n                    },\n                    new string[] {}\n                }\n            });\n            var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\n            var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n            c.IncludeXmlComments(xmlPath);\n        });\n        \n         await Task.CompletedTask;\n    }\n    \n    public static async Task InitializeRepositories(this IServiceCollection service)\n    {\n        service.AddScoped<IImageRepository, ImageRepository>();\n        service.AddScoped<IHorseRepository, HorseRepository>();\n\n        await Task.CompletedTask;\n    }\n    \n    public static async Task InitializeServices(this IServiceCollection service)\n    {\n        service.AddScoped<IJwtService, JwtService>();\n        service.AddTransient<IEmailSender, SendGridLinkBuilder>();\n        service.AddScoped<ISendGridLinkBuilder, SendGridLinkBuilder>();\n        \n        service.AddScoped<IImagesService, ImageService>();\n        service.AddScoped<IUserService, UserService>();\n        service.AddScoped<IHorseService, HorseService>();\n        \n        await Task.CompletedTask;\n    }\n\n    public static async Task InitializeAuth(this IServiceCollection service, WebApplicationBuilder builder)\n    {\n        service.AddIdentity<User, IdentityRole<int>>(opts =>\n            {\n                opts.SignIn.RequireConfirmedAccount = true;\n                opts.User.RequireUniqueEmail = true;\n                opts.SignIn.RequireConfirmedEmail = true;\n            })\n            .AddRoles<IdentityRole<int>>()\n            .AddTokenProvider<DataProtectorTokenProvider<User>>(\"Sukuposti.API\")\n            .AddEntityFrameworkStores<ApplicationContext>()\n            .AddDefaultTokenProviders();\n        \n        service.Configure<IdentityOptions>(opts =>\n        {\n            opts.Password.RequireDigit = true;\n            opts.Password.RequireLowercase = true;\n            opts.Password.RequireUppercase = true;\n            opts.Password.RequiredLength = 6;\n            opts.Password.RequireNonAlphanumeric = true;\n            opts.Password.RequiredUniqueChars = 1;\n\n            opts.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\n            opts.Lockout.MaxFailedAccessAttempts = 5;\n            opts.Lockout.AllowedForNewUsers = true;\n\n            opts.User.AllowedUserNameCharacters =\n                \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+\";\n            opts.User.RequireUniqueEmail = false;\n            opts.SignIn.RequireConfirmedEmail = true;\n        });\n        \n        service.AddAuthentication(options =>\n        {\n            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n            options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;\n        }).AddJwtBearer(o =>\n        {\n            o.TokenValidationParameters = new TokenValidationParameters\n            {\n                AuthenticationType = \"Jwt\",\n                ValidIssuer = builder.Configuration[\"JwtOptions:Issuer\"],\n                ValidAudience = builder.Configuration[\"JwtOptions:Audience\"],\n                IssuerSigningKey = new SymmetricSecurityKey\n                    (Encoding.UTF8.GetBytes(builder.Configuration[\"JwtOptions:Key\"]!)),\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateLifetime = false,\n                ValidateIssuerSigningKey = true\n            };\n        });\n\n        service.AddAuthorization(opts =>\n        {\n            opts.AddPolicy(Roles.User, policy => policy.RequireRole(Roles.User));\n            opts.AddPolicy(Roles.Admin, policy => policy.RequireRole(Roles.Admin));\n        });\n        \n        await Task.CompletedTask;\n    }\n}
===================================================================
diff --git a/Sukuposti.API/Initializer.cs b/Sukuposti.API/Initializer.cs
--- a/Sukuposti.API/Initializer.cs	
+++ b/Sukuposti.API/Initializer.cs	
@@ -3,7 +3,7 @@
 
 namespace Sukuposti.API;
 
-public static class Initializer
+public static class a
 {
     public static async Task InitializeSwagger(this IServiceCollection service)
     {
